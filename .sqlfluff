[sqlfluff]
dialect = athena
exclude_rules = ambiguous.column_count, structure.column_order, RF04, ST05
large_file_skip_byte_limit = 0
processes = -1

[sqlfluff:indentation]
indent_unit = space
tab_space_size = 4
indented_joins = False
indented_using_on = True
indented_on_contents = False
indented_ctes = False
indented_then = True
indented_then_contents = False
allow_implicit_indents = True

[sqlfluff:rules:aliasing.table]
aliasing = explicit
[sqlfluff:rules:aliasing.column]
aliasing = explicit
[sqlfluff:rules:aliasing.length]
min_alias_length = 2

[sqlfluff:rules:capitalisation.keywords]
capitalisation_policy = upper
[sqlfluff:rules:capitalisation.identifiers]
capitalisation_policy = upper
[sqlfluff:rules:capitalisation.functions]
extended_capitalisation_policy = upper
[sqlfluff:rules:capitalisation.literals]
capitalisation_policy = upper
[sqlfluff:rules:capitalisation.types]
extended_capitalisation_policy = upper

[sqlfluff:rules:convention.casting_style]
preferred_type_casting_style = cast

[sqlfluff:templater:jinja]
load_macros_from_path = dbt/macros

[sqlfluff:templater:jinja:macros]
# It appears that some common dbt variables like `target` and `exceptions` do
# not have sqlfluff mocks builtin, so we have to mock out any macros
# that reference those variables if they are used in code that sqlfluff
# lints
get_s3_dependency_dir = {% macro get_s3_dependency_dir() %}s3://bucket{% endmacro %}
