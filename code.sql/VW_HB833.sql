
/* 
This view supports the implementation of HB 833 - the automatic renewal of senior homestead exemptions.

This produces a table showing each senior with a Sr. homestead exemption in each year. STATUS_CHANGE_NEXTYEAR shows the yoy change in match 
on PIN, Name, and Birthday from next year's roll. -1 indicates that the senior will leave the roll, or change PINs. 1 the opposite. 
0 indicates no change. NULL values are for the most recent year, since we don't know what will happen.
YEARS_ON_TOTAL is the number of years the senior was on the roll over the entire sample period.
If you're looking at the most current year in the data, YEARS_ON_TOTAL will be the number of years on the roll to date.
DECEASED vaiables show whether the person is deceased currently, while DEATH variables show that the individual died in 
that given calendar year.

e also ac
*/
SELECT E.*, LTRIM(RTRIM(CAST(PL_HOUSE_NO AS varchar(10)))) + ' '
+ LTRIM(RTRIM(PL_DIR)) + ' '
+ LTRIM(RTRIM(PL_STR_NAME)) + ' '
+ LTRIM(RTRIM(PL_STR_SUFFIX)) AS PROPERTY_ADDRESS
, PL_CITY_NAME AS PROPERTY_CITY
, PL_ZIPCODE AS PROPERTY_ZIP
	, CASE WHEN K.LEX_DEATH_ID IS NULL THEN 0 ELSE 1 END AS LEXIS_DECEASED 
	, CASE WHEN YEAR(J.LEX_DEATHDATE) IS NULL THEN 0 ELSE 1 END AS LEXIS_DEATH 
	/* , CASE WHEN M.DEATH_DATE IS NULL THEN 0 ELSE 1 END AS IDPH_DECEASED 
	, CASE WHEN YEAR(L.DEATH_DATE) IS NULL THEN 0 ELSE 1 END AS IDPH_DEATH */
	, CASE WHEN CCRD_SALES IS NULL THEN 0 ELSE CCRD_SALES END AS CCRD_SALES
	, CASE WHEN IDOR_SALES IS NULL THEN 0 ELSE IDOR_SALES END AS IDOR_SALES
	FROM(
		
		/* PART 1 - a dataset unique by PIN, Name, and birthday to join flag data against */
		/* In this section, we join SENIOREXEMPTIONS against itself, lagged one year, to get deltas */
		SELECT D.CALENDAR_YEAR, D.PIN, LTRIM(RTRIM(D.[NAME])) AS TAXPAYER_NAME
		, D.BIRTH_DATE AS BIRTH_DATE
		, STATUS_CHANGE_NEXTYEAR, SF AS SENIOR_FREEZE
		, YEARS_ON_TOTAL, FINAL_YEAR
		/* This inner query creates a data set with Year, Name, PIN and a status change indicator by joining exemption data against itself, and then also accounting for C of Es */
		FROM (SELECT 
				CASE WHEN A.TAX_YEAR IS NULL AND B.TAX_YEAR_LEAD IS NOT NULL THEN B.TAX_YEAR_LEAD 
				WHEN A.TAX_YEAR IS NOT NULL AND B.TAX_YEAR_LEAD IS NULL THEN A.TAX_YEAR 
				WHEN A.TAX_YEAR IS NOT NULL AND B.TAX_YEAR_LEAD IS NOT NULL THEN A.TAX_YEAR
				WHEN A.TAX_YEAR IS NULL AND B.TAX_YEAR_LEAD IS NULL THEN COE.CALENDAR_YEAR
					END AS CALENDAR_YEAR
			  , CASE WHEN A.[NAME] IS NULL AND B.[NAME] IS NOT NULL THEN B.[NAME] 
				WHEN A.[NAME] IS NOT NULL AND B.[NAME] IS NULL THEN A.[NAME]
				WHEN A.[NAME] IS NOT NULL AND B.[NAME] IS NOT NULL THEN A.[NAME]
				WHEN A.[NAME] IS NULL AND B.[NAME] IS NULL THEN COE.[NAME] 
					END AS NAME
			  , CASE WHEN A.BIRTH_DATE IS NULL AND  B.BIRTH_DATE IS NOT NULL THEN B.BIRTH_DATE 
			  WHEN A.BIRTH_DATE IS NOT NULL AND  B.BIRTH_DATE IS NULL THEN A.BIRTH_DATE 
			  WHEN A.BIRTH_DATE IS NOT NULL AND  B.BIRTH_DATE IS NOT NULL THEN A.BIRTH_DATE 
			  WHEN A.BIRTH_DATE IS NULL AND  B.BIRTH_DATE IS NULL THEN NULL
					END AS BIRTH_DATE
			  , CASE WHEN A.PIN IS NULL AND  B.PIN IS NOT NULL THEN B.PIN 
			  WHEN A.PIN IS NOT NULL AND  B.PIN IS NULL THEN A.PIN 
			  WHEN A.PIN IS NOT NULL AND  B.PIN IS NOT NULL THEN A.PIN 
			  WHEN A.PIN IS NULL AND  B.PIN IS NULL THEN COE.PIN 
					END AS PIN
			  /* This is the delta column showing the change from the previous year */ 
			  , CASE WHEN TAX_YEAR<(SELECT MAX(TAX_YEAR)-1 FROM SENIOREXEMPTIONS) AND B.TAX_YEAR_LEAD IS NULL AND COE.CALENDAR_YEAR IS NULL THEN -1
				WHEN TAX_YEAR<(SELECT MAX(TAX_YEAR)-1 FROM SENIOREXEMPTIONS) AND B.TAX_YEAR_LEAD IS NULL AND COE.CALENDAR_YEAR IS NOT NULL THEN 0
				WHEN TAX_YEAR_LEAD<(SELECT MAX(TAX_YEAR)-1 FROM SENIOREXEMPTIONS) AND A.TAX_YEAR IS NULL AND COE2.CALENDAR_YEAR IS NULL THEN 1
				WHEN TAX_YEAR_LEAD<(SELECT MAX(TAX_YEAR)-1 FROM SENIOREXEMPTIONS) AND  A.TAX_YEAR IS NULL AND COE2.CALENDAR_YEAR IS NOT NULL THEN 0
				WHEN TAX_YEAR_LEAD<(SELECT MAX(TAX_YEAR)-1 FROM SENIOREXEMPTIONS) AND A.TAX_YEAR IS NOT NULL AND B.TAX_YEAR_LEAD IS NOT NULL THEN 0
			  /* We account for the fact that the last uear of data we don't know what will happen next year */
				WHEN TAX_YEAR_LEAD>=(SELECT MAX(TAX_YEAR)-1 FROM SENIOREXEMPTIONS) THEN NULL
				END AS STATUS_CHANGE_NEXTYEAR 
			FROM 
				/* This join allows for the delta calculation the change from the prior year */
				(SELECT NAME, BIRTH_DATE, PIN, TAX_YEAR FROM SENIOREXEMPTIONS) AS A	
				FULL OUTER JOIN
				(SELECT NAME, BIRTH_DATE, PIN, TAX_YEAR-1 AS TAX_YEAR_LEAD FROM SENIOREXEMPTIONS) AS B
				ON A.NAME=B.NAME AND A.BIRTH_DATE=B.BIRTH_DATE AND A.TAX_YEAR=B.TAX_YEAR_LEAD AND A.PIN=B.PIN
				/* Need to account for certificates of error */
				LEFT JOIN
				(SELECT PIN, 2000+COE_TAX_YR AS CALENDAR_YEAR, COE_WC_NAME AS NAME 
				FROM AS_RES_CERTOFCORRECTIONS AS C 
				WHERE (COE_ACT_TYPE IN (4) OR (COE_ACT_TYPE IN (20) AND COE_REASON IN (43, 44, 84, 85, 86))) AND COE_TAX_YR<=20) AS COE
				ON A.PIN=COE.PIN AND A.TAX_YEAR=COE.CALENDAR_YEAR
				LEFT JOIN
				(SELECT PIN, 2000+COE_TAX_YR AS CALENDAR_YEAR FROM AS_RES_CERTOFCORRECTIONS AS C 
				WHERE (COE_ACT_TYPE IN (4) OR (COE_ACT_TYPE IN (20) AND COE_REASON IN (43, 44, 84, 85, 86))) AND COE_TAX_YR<=20) AS COE2
				ON B.PIN=COE2.PIN AND B.TAX_YEAR_LEAD=COE2.CALENDAR_YEAR
				) AS D 
			/* This gets some additional contextual information at the individual level, how many years they have an exemption, and what their last year is*/
			LEFT JOIN
			(SELECT COUNT(NAME) AS YEARS_ON_TOTAL, MAX(TAX_YEAR) AS FINAL_YEAR, NAME, BIRTH_DATE, PIN FROM SENIOREXEMPTIONS GROUP BY PIN, NAME, BIRTH_DATE) AS C
			ON D.PIN=C.PIN AND D.NAME=C.NAME AND D.BIRTH_DATE=C.BIRTH_DATE /* This may create data errors where a senior changed PINs */
			/* This provides context about what exemptions they received */
			INNER JOIN /* Need an INNER JOIN to account for people who moved between homes */
			(SELECT PIN, TAX_YEAR AS CALENDAR_YEAR, HS, SF FROM EXEMPTIONS WHERE HS>0) AS H
			ON H.PIN=D.PIN AND H.CALENDAR_YEAR=D.CALENDAR_YEAR 
			WHERE (1=1)
			/* The last year in the data set will give you issues if this is run midyear */
			AND D.CALENDAR_YEAR<(SELECT MAX(TAX_YEAR) FROM SENIOREXEMPTIONS) AND D.CALENDAR_YEAR>=2008
		) AS E
	/* Need address field for death record matching */
	INNER JOIN
		PROPLOCS 
	ON E.PIN = PL_PIN
	LEFT JOIN
		/* PART 2 - sales flages. This should be a 1:1 corrosponance */
		(SELECT DISTINCT PIN, COUNT(DISTINCT DOC_NO) AS CCRD_SALES, YEAR(EXECUTED_DATE) AS SALE_YEAR FROM DTBL_CCRDSALES GROUP BY PIN, YEAR(EXECUTED_DATE)) AS F
	ON E.CALENDAR_YEAR=F.SALE_YEAR AND E.PIN=F.PIN
	LEFT JOIN
		(SELECT DISTINCT PIN, COUNT(DISTINCT DOC_NO) AS IDOR_SALES, YEAR(RECORDED_DATE) AS SALE_YEAR FROM IDORSALES GROUP BY PIN, YEAR(RECORDED_DATE)) AS G
	ON E.CALENDAR_YEAR=G.SALE_YEAR AND E.PIN=G.PIN
		/* Part 3 - death flags */
		/* LEXISNEXIS data */
		/* Flag a death in the year of death */
	LEFT JOIN
		(SELECT * FROM DTBL_LEXISNEXIS_SENIOR_DEATHS WHERE LEX_DEATH_ID NOT IN ('')) AS J
	ON E.CALENDAR_YEAR=YEAR(LEX_DEATHDATE) AND E.PIN=J.PIN AND E.TAXPAYER_NAME=J.NAME AND E.BIRTH_DATE=J.BIRTH_DAY
	LEFT JOIN
		/* Indicate whether someone is deceased in any year */
	(SELECT * FROM DTBL_LEXISNEXIS_SENIOR_DEATHS WHERE LEX_DEATH_ID NOT IN ('')) AS K
	ON E.TAXPAYER_NAME=K.NAME AND E.BIRTH_DATE=K.BIRTH_DAY AND E.PIN=K.PIN 
		/*IDPH data */
		/* Flag a death in the year of death */
	LEFT JOIN
	DTBL_IDPH_SENIOR_DEATHS AS L
		ON E.TAXPAYER_NAME=CONCAT(L.LAST_NAME, ' ', L.FIRST_NAME, ' ', L.MIDDLE_NAME) 
		AND E.BIRTH_DATE=L.BIRTH_DATE 
		AND E.CALENDAR_YEAR=YEAR(DEATH_DATE) 
		AND LTRIM(RTRIM(CAST(PL_HOUSE_NO AS varchar(10)))) + ' '
+ LTRIM(RTRIM(PL_DIR)) + ' '
+ LTRIM(RTRIM(PL_STR_NAME)) + ' '
+ LTRIM(RTRIM(PL_STR_SUFFIX))=L.[RESIDENCE ADDRESS] 
		AND PL_CITY_NAME=L.[RESIDENCE CITY] 
		AND CONVERT(VARCHAR, PL_ZIPCODE)=L.[RESIDENCE ZIP] 
		/* Indicate whether someone is deceased at all */
	LEFT JOIN
	 DTBL_IDPH_SENIOR_DEATHS AS M
		ON E.TAXPAYER_NAME=CONCAT(M.LAST_NAME, ' ', M.FIRST_NAME, ' ', M.MIDDLE_NAME)  
		AND E.BIRTH_DATE=M.BIRTH_DATE AND LTRIM(RTRIM(CAST(PL_HOUSE_NO AS varchar(10)))) + ' '
+ LTRIM(RTRIM(PL_DIR)) + ' '
+ LTRIM(RTRIM(PL_STR_NAME)) + ' '
+ LTRIM(RTRIM(PL_STR_SUFFIX))=M.[RESIDENCE ADDRESS] 
		AND PL_CITY_NAME=M.[RESIDENCE CITY] 
		AND CONVERT(VARCHAR, PL_ZIPCODE)=M.[RESIDENCE ZIP] 		
ORDER BY CALENDAR_YEAR, PIN
/*
----------------------------------------------Queries for memo-------------------------------------------------------- 
/* Integrity - did we match Lexis and IDPH data back into SENIOREXEMPTIONS correctly? It should be a complete match */
/* Total number of non-matching observations from Lexis to SENIOrS match*/
SELECT COUNT( DISTINCT LEX_DEATH_ID) FROM
		DTBL_LEXISNEXIS_SENIOR_DEATHS AS LEX
		FULL OUTER JOIN
		SENIOREXEMPTIONS AS SENIORS 
		ON LEX.PIN=SENIORS.PIN AND LEX.NAME=SENIORS.NAME AND LEX.BIRTH_DAY=SENIORS.BIRTH_DATE
		WHERE LEX.BIRTH_DAY IS NOT NULL AND SENIORS.BIRTH_DATE IS NOT NULL
		AND SENIORS.PIN IS NULL

/* Total number of non-matching observations from IDPH to SENIOrS match*/
SELECT COUNT(DISTINCT AGE) FROM
		DTBL_IDPH_SENIOR_DEATHS AS IDPH
		FULL OUTER JOIN
		(SELECT SENIORS.*, G.PROPERTY_ADDRESS, G.PROPERTY_CITY FROM 
		SENIOREXEMPTIONS AS SENIORS
		LEFT JOIN
		VW_PINGEO AS G
		ON SENIORS.PIN=G.PIN) AS A
		ON IDPH.[RESIDENCE ADDRESS]=A.PROPERTY_ADDRESS AND IDPH.[RESIDENCE CITY]=A.PROPERTY_CITY AND IDPH.BIRTH_DATE=A.BIRTH_DATE AND YEAR(DEATH_DATE)=TAX_YEAR
		WHERE IDPH.BIRTH_DATE IS NOT NULL AND A.PROPERTY_ADDRESS IS NULL

/* Total Seniors w/ homeowners in 2017 */
<<<<<<< Updated upstream
=======
SELECT COUNT(S.PIN) FROM SENIOREXEMPTIONS AS S WhERE TAX_YEAR=2018

>>>>>>> Stashed changes
SELECT COUNT(S.PIN) FROM SENIOREXEMPTIONS AS S INNER JOIN EXEMPTIONS AS E
ON S.PIN=E.PIN AND S.TAX_YEAR=E.TAX_YEAR
WHERE (HS>0 OR SF>0) AND S.TAX_YEAR=2017


duplicate rows in SENIOREXEMPTIONS by name, birthday, year
SELECT (SELECT COUNT(NAME) FROM (SELECT NAME, BIRTHDATE, TAX_YEAR FROM SENIOREXEMPTIONS) AS A)
- (SELECT COUNT(NAME) FROM (SELECT DISTINCT NAME, BIRTHDATE, TAX_YEAR FROM SENIOREXEMPTIONS) AS B) 

SELECT (SELECT COUNT(NAME) FROM (SELECT NAME, BIRTHDATE FROM SENIOREXEMPTIONS WHERE TAX_YEAR=2018) AS A)
- (SELECT COUNT(NAME) FROM (SELECT DISTINCT NAME, BIRTHDATE FROM SENIOREXEMPTIONS WHERE TAX_YEAR=2018) AS B) 

SELECT COUNT(COUNTa) AS COUNTa, PINs FROM (SELECT 1 AS COUNTa, COUNT(PIN) AS PINs FROM SENIOREXEMPTIONS WHERE TAX_YEAR=2018 GROUP BY NAME, BIRTHDATE) AS B GROUP BY PINs

SELECT COUNT(NAME) AS SENIORS, TAX_YEAR FROM SENIOREXEMPTIONS WHERE TAX_YEAR=2018 GROUP BY TAX_YEAR
SELECT COUNT(PIN) AS EXEMPTIONS, TAX_YEAR FROM EXEMPTIONS WHERE TAX_YEAR=2018 AND (HS>0 OR SF>0) GROUP BY TAX_YEAR

SELECT COUNT(HS) FROM EXEMPTIONS WHERE TAX_YEAR=2018 AND HS>0 AND SF=0
SELECT COUNT(HS) FROM EXEMPTIONS WHERE TAX_YEAR=2018 AND HS>0 


messed up dates in SENIOREXEMPTIONS
SELECT  COUNT(BIRTHDATE) as Bad_BDAYS,TAX_YEAR FROM SENIOREXEMPTIONS
WHERE ISDATE(CONCAT(SUBSTRING(CONVERT(VARCHAR, BIRTHDATE),3,2), '/', RIGHT(CONVERT(VARCHAR, BIRTHDATE),2),'/19',LEFT(CONVERT(VARCHAR, BIRTHDATE),2)))=0
GROUP BY TAX_YEAR

One individual at two properties
SELECT * FROM SENIOREXEMPTIONS WHERE (PIN IN ('18201070650000','18201000511039')
AND NAME IN ('AALBREGTSE MARSHA K')) ORDER BY TAX_YEAR, PIN

SELECT * FROM EXEMPTIONS WHERE (PIN IN ('18201070650000','18201000511039')) AND TAX_YEAR>2013 AND TAX_YEAR< 2017 ORDER BY TAX_YEAR, PIN 

number of deaths in Lexis Data
SELECT COUNT(PIN) FROM DTBL_LEXISNEXIS_SENIOR_DEATHS WHERE LEX_DEATH_ID NOT IN ('')

tables examples for presentation 
SELECT PIN, NAME, BIRTHDATE, PIN, TAX_YEAR FROM SENIOREXEMPTIONS
WHERE PIN='04162130230000' 

SELECT NAME, BIRTHDATE, PIN, TAX_YEAR+1 AS TAX_YEAR_LAG FROM SENIOREXEMPTIONS
WHERE PIN='04162130230000' 


SELECT  * FROM (SELECT 1 AS DECEASED,
	CASE WHEN LEN(CONVERT(VARCHAR, PIN))=13 THEN '0'+CONVERT(VARCHAR, PIN) ELSE CONVERT(VARCHAR, PIN) END AS PIN
	, NAME, CONVERT(DATE, BIRTH_DATE) AS BIRTH_DATE, LEFT(LEX_DEATH_DATE, 4) AS DEATH_YEAR FROM DTBL_LEXISNEXIS_SENIOR_DEATHS 
	WHERE LEX_DEATH_ID NOT IN ('') AND ISNUMERIC(LEX_DEATH_DATE)=1 AND ISDATE(BIRTH_DATE)=1) AS K
	WHERE PIN IN ('07360000000000') OR NAME IN ('SMYTH GENEVIEVE')

SELECT COUNT(NAME) FROM DTBL_LEXISNEXIS_SENIOR_DEATHS WHERE ISDATE(BIRTH_DATE)=0
SELECT COUNT(NAME) FROM DTBL_LEXISNEXIS_SENIOR_DEATHS 

SELECT * FROM SENIOREXEMPTIONS WHERE PIN IN ('23331000130000', '27132040291008') AND NAME IN ('AARDSMA JENNIE C')



	


/* specific examples*/
SELECT * FROM DTBL_LEXISNEXIS_SENIOR_DEATHS WHERE LEX_DEATH_ID='2594929903'
SELECT PIN, NAME, BIRTHDATE, SUBSTRING(CONVERT(VARCHAR, BIRTHDATE), 3, 2) +'/'+ RIGHT(CONVERT(VARCHAR, BIRTHDATE),2)+'/'+ '19'+LEFT(CONVERT(VARCHAR, BIRTHDATE), 2) AS BIRTHDATE 
FROM SENIOREXEMPTIONS WHERE PIN='01011220040000' AND TAX_YEAR>2008 AND TAX_YEAR<2019


SELECT TOP 1 A.PIN, A.NAME, '19'+LEFT(BIRTHDATE, 2) +'/'+ SUBSTRING(BIRTHDATE, 3, 2) +'/'+ RIGHT(BIRTHDATE,2) AS BIRTHDAY
, CASE WHEN PROPERTY_ADDRESS IS NULL THEN 'ADDRESS MISSING FROM PROPLOCS' ELSE
PROPERTY_ADDRESS END AS PROPERTY_ADDRESS  
, PROPERTY_APT_NO, PROPERTY_CITY, PROPERTY_ZIP
FROM
(SELECT DISTINCT PIN, [NAME], CONVERT(VARCHAR, BIRTHDATE) AS BIRTHDATE FROM LNSeniors) AS A
INNER JOIN VW_PINGEO AS GEO
ON GEO.PIN=A.PIN


*/