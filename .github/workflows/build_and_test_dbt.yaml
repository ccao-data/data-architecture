name: Build and test dbt

on:
  pull_request:
    branches: [master, data-catalog]
  push:
    branches: [master, data-catalog]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    # These permissions are needed to interact with GitHub's OIDC Token endpoint
    # so that we can authenticate with AWS
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install dbt requirements
        uses: ./.github/actions/install_dbt_requirements

      - name: Load environment variables
        uses: ./.github/actions/load_environment_variables

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_TO_ASSUME_ARN }}
          aws-region: us-east-1

      - name: Set environment for branch
        run: |
          if [[ $GITHUB_REF_NAME == 'master' ]]; then
            {
              echo "DBT_TARGET=prod";
              echo "CACHE_KEY=master";
            } >> "$GITHUB_ENV"
          elif [[ $GITHUB_REF_NAME == 'data-catalog' ]]; then
            {
              echo "DBT_TARGET=ci";
              echo "CACHE_KEY=data-catalog";
              echo "GITHUB_HEAD_REF=data-catalog";
            } >> "$GITHUB_ENV"
          else
            {
              echo "DBT_TARGET=ci";
              echo "CACHE_KEY=$GITHUB_HEAD_REF";
            } >> "$GITHUB_ENV"
          fi
        shell: bash

      - name: Cache dbt manifest
        id: cache
        uses: actions/cache@v3
        with:
          path: ${{ env.DBT_MANIFEST_DIR }}
          key: ${{ env.DBT_CACHE_NAME }}-$${{ env.CACHE_KEY }}
          restore-keys: |
            ${{ env.DBT_CACHE_NAME }}-data-catalog
            ${{ env.DBT_CACHE_NAME }}-master

      - if: ${{ steps.cache.outputs.cache-hit == 'true' }}
        name: Set state args
        run: echo "DBT_STATE_ARGS='-s state:modified --state target/'" >> "$GITHUB_ENV"
        shell: bash

      - name: Test dbt macros
        run: dbt run-operation test_all
        working-directory: ${{ env.DBT_PROJECT_DIR }}
        shell: bash

      - name: Build models
        run: dbt run --target "$DBT_TARGET" "$DBT_STATE_ARGS"
        working-directory: ${{ env.DBT_PROJECT_DIR }}
        shell: bash

      - name: Test models
        run: dbt test --target "$DBT_TARGET" "$DBT_STATE_ARGS"
        working-directory: ${{ env.DBT_PROJECT_DIR }}
        shell: bash
