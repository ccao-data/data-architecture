#!/usr/bin/env python3
#
# Generate an Excel workbook of dbt test failures that can be shared with
# other teams for human review.
#
# This script assumes that it is being run in sequence after a call to
# `dbt test --store-failures`, since it depends on two files created by
# that operation (run_results.json and manifest.json).
#
# Expects three positional arguments:
#
#   1. The local path to the run_results.json file generated by a test run
#   2. The local path to the manifest.json file for the dbt DAG
#   3. The output path to write the workbook
#     i. It would be nice to be able to write to stdout, but openpyxl does not
#        seem to support that functionality
#
# Expects one environment variable:
#
#  1.AWS_ATHENA_S3_STAGING_DIR: Location where Athena query results should
#    be written
#
# Example usage:
#
#   AWS_ATHENA_S3_STAGING_DIR=s3://foo-bar-baz/ \
#       python3 generate_test_failure_workbook.py \
#       ./target/run_results.json \
#       ./target/manifest.json \
#       test_failures.xslx

import dataclasses
import json
import os
import sys
import typing

import openpyxl
import openpyxl.styles
import pyathena


@dataclasses.dataclass
class FailingTest:
    test_name: str
    fieldnames: typing.List
    failing_rows: typing.Tuple


def main() -> None:
    try:
        run_results_filepath = sys.argv[1]
    except IndexError:
        raise ValueError(
            "Missing first positional argument, the path to run_results.json"
        )

    try:
        manifest_filepath = sys.argv[2]
    except IndexError:
        raise ValueError(
            "Missing second positional argument, the path to manifest.json"
        )

    try:
        output_filepath = sys.argv[3]
    except IndexError:
        raise ValueError(
            "Missing third positional argument, the output filepath"
        )

    with open(run_results_filepath) as run_results_fobj:
        run_results = json.load(run_results_fobj)

    with open(manifest_filepath) as manifest_fobj:
        manifest = json.load(manifest_fobj)

    conn = pyathena.connect(
        s3_staging_dir=os.getenv("AWS_ATHENA_S3_STAGING_DIR"),
        region_name="us-east-1",
    )
    cursor = conn.cursor()

    failing_tests: typing.List[FailingTest] = []
    for result in run_results["results"]:
        if result["status"] == "fail":
            unique_id = result["unique_id"]
            # Unique ID format is:
            # test.athena.<test_name>.<hash>
            test_name = unique_id.split(".")[2]

            node = manifest["nodes"].get(unique_id)
            if node is None:
                raise ValueError(
                    f"Missing dbt manifest node with id {unique_id}"
                )

            relation_name = node.get("relation_name")
            if relation_name is None:
                raise ValueError(
                    f"Missing relation_name for test {test_name}. Did you "
                    "run `dbt test` with the --store-failures flag?"
                )

            cursor.execute(f"select * from {relation_name}")
            # The first element of each tuple in the list produced by
            # cursor.description is always the column name
            fieldnames = [col_meta[0] for col_meta in cursor.description]
            failing_rows = cursor.fetchall()
            if len(failing_rows) > 0:
                failing_tests.append(
                    FailingTest(
                        test_name=test_name,
                        fieldnames=fieldnames,
                        failing_rows=failing_rows,
                    )
                )
            else:
                raise ValueError(
                    f"Test {relation_name} has status 'fail' but no failures"
                )

    if not failing_tests:
        raise ValueError(f"{run_results_filepath} contains no failing rows")

    workbook = openpyxl.Workbook()

    # openpyxl workbooks are created with one untitled active sheet by default,
    # so rename and fill out that sheet before creating any new sheets
    first_sheet = workbook.active
    first_failing_test = failing_tests[0]
    add_failing_test_data_to_sheet(first_sheet, first_failing_test)

    # Create sheets for any remaining tests
    for failing_test in failing_tests[1:]:
        sheet = workbook.create_sheet()
        add_failing_test_data_to_sheet(sheet, failing_test)

    workbook.save(output_filepath)


def add_failing_test_data_to_sheet(
    sheet: openpyxl.worksheet.worksheet.Worksheet, failing_test: FailingTest
) -> None:
    # For maximum compatibility, Excel worksheet names should not exceed
    # 31 characters
    sheet.title = failing_test.test_name[0:31]
    sheet.append(failing_test.fieldnames)

    # Style the header differently from rows so that it is visually distinct
    font = openpyxl.styles.Font(bold=True)
    for cell in sheet[1]:
        cell.font = font

    for failing_row in failing_test.failing_rows:
        sheet.append(failing_row)


if __name__ == "__main__":
    main()
