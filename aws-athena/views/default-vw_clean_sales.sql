-- !preview conn=AWS_ATHENA_CONN
-- View containing unique, filtered sales
CREATE OR REPLACE VIEW default.vw_clean_sales AS

WITH UNIQUE_SALES AS (

select DISTINCT
    SALEKEY AS SALE_KEY,
	FRIEND.TRANSNO AS DOC_NO,
	INSTRTYP AS DEED_TYPE,
	FRIEND.PARID AS PIN,
	SUBSTR(FRIEND.SALEDT, 1, 10) AS SALE_DATE,
	SUBSTR(FRIEND.SALEDT, 1, 4) AS SALE_YEAR,
	FRIEND.PRICE AS SALE_PRICE,
	LOG(FRIEND.PRICE, 10) AS SALE_PRICE_LOG,
	OLDOWN AS SELLER_NAME,
	OWN1 AS BUYER_NAME,
	CASE
		WHEN SALETYPE = '0' THEN 'LAND'
		WHEN SALETYPE = '1' THEN 'LAND AND BUILDING'
	END AS SALE_TYPE,
	TOWNSHIP, CLASS
from iasworld.SALES FRIEND

LEFT JOIN (

select DISTINCT PARID, CLASS, SUBSTR(NBHD, 1, 2) AS TOWNSHIP, TAXYR FROM iasworld.PARDAT

) TOWNS ON FRIEND.PARID = TOWNS.PARID AND SUBSTR(FRIEND.SALEDT, 1, 4) = TOWNS.TAXYR

LEFT JOIN (

select PARID, PRICE, TRANSNO,
       row_number() over(PARTITION BY PARID, SALEDT, PRICE ORDER BY PARID, SALEDT, PRICE) as lineNum
from iasworld.SALES
WHERE TRANSNO IS NOT NULL

) NO_DOUBLE_TRANSNO ON FRIEND.PARID = NO_DOUBLE_TRANSNO.PARID AND FRIEND.PRICE = NO_DOUBLE_TRANSNO.PRICE AND FRIEND.TRANSNO = NO_DOUBLE_TRANSNO.TRANSNO

INNER JOIN (

SELECT PARID, SALEDT, MAX(PRICE) AS MAX_PRICE FROM iasworld.SALES
WHERE TRANSNO IS NOT NULL
    GROUP BY PARID, SALEDT

) TUG ON FRIEND.PARID = TUG.PARID AND FRIEND.SALEDT = TUG.SALEDT AND FRIEND.PRICE = TUG.MAX_PRICE

LEFT JOIN (

select TRANSNO, COUNT(TRANSNO) AS DOUBLE_CHECK FROM iasworld.SALES WHERE TRANSNO IS NOT NULL AND NOPAR = 1 GROUP BY TRANSNO

) LAST_JOIN ON FRIEND.TRANSNO = LAST_JOIN.TRANSNO

WHERE FRIEND.TRANSNO IS NOT NULL
    --- NOPAR IS NUMBER OF PARCELS SOLD
	AND NOPAR = 1
	AND FRIEND.PRICE > 10000
	AND CAST(SUBSTR(FRIEND.SALEDT, 1, 4) AS INT) BETWEEN 1997 AND YEAR(current_date)
AND DOUBLE_CHECK  = 1
AND lineNum = 1
)

SELECT US.*, LOWER_LIM, UPPER_LIM FROM UNIQUE_SALES US

LEFT JOIN (

SELECT TOWNSHIP, CLASS,
AVG(SALE_PRICE_LOG) - STDDEV(SALE_PRICE_LOG) * 4 AS LOWER_LIM,
AVG(SALE_PRICE_LOG) + STDDEV(SALE_PRICE_LOG) * 4 AS UPPER_LIM
FROM UNIQUE_SALES
GROUP BY TOWNSHIP, CLASS

) SALES_FILTER ON US.TOWNSHIP = SALES_FILTER.TOWNSHIP AND US.CLASS = SALES_FILTER.CLASS

WHERE SALE_PRICE_LOG BETWEEN LOWER_LIM AND UPPER_LIM