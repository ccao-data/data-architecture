sources:
  - name: iasworld
    loaded_at_field: date_parse(wen, '%Y-%m-%d %H:%i:%s.0')
    tags:
      - load_auto

    tables:
      - name: asmt_all
        description: '{{ doc("table_asmt_all") }}'
        freshness:
          filter: taxyr >= date_format(current_date - interval '1' year, '%Y')
          warn_after: {count: 24, period: hour}
          error_after: {count: 48, period: hour}

        columns:
          - name: class
            description: '{{ doc("shared_column_class") }}'
            tests:
              - relationships:
                  to: source('ccao', 'class_dict')
                  field: class_code
                  config:
                    where: |
                      taxyr >= '2022'
                      AND class NOT IN ('EX', 'RR', '999')
                      AND NOT REGEXP_LIKE(class, '[0-9]{3}[A|B]')
                      AND rolltype != 'RR'
                      AND deactivat IS NULL
                      AND valclass IS NULL
          - name: cur
            description: '{{ doc("column_cur") }}'
            tests:
              - accepted_values:
                  values: ['Y', 'D', 'N']
          - name: deactivat
            description: '{{ doc("column_deactivat") }}'
          - name: distcode
            description: District code
          - name: iasw_id
            description: '{{ doc("column_iasw_id") }}'
          - name: jur
            description: '{{ doc("column_jur") }}'
          - name: luc
            description: '{{ doc("column_luc") }}'
          - name: ovrclass
            description: Override class
          - name: ovrcodtax
            description: Override code for taxes
          - name: ovrvaltax
            description: Override value for taxes
          - name: parid
            description: '{{ doc("shared_column_pin") }}'
            tests:
              - not_null
              - relationships:
                  to: source('iasworld', 'pardat')
                  field: parid
          - name: procdate
            description: '{{ doc("column_procdate") }}'
          - name: procname
            description: '{{ doc("column_procname") }}'
            tests:
              - accepted_values:
                  values: ['CCAOVALUE', 'CCAOFINAL', 'BORVALUE', 'CONVERT']
          - name: reascd
            description: Reason code for change in assessed value
          - name: rolltype
            description: '{{ doc("column_rolltype") }}'
          - name: seq
            description: '{{ doc("shared_column_seq") }}'
            tests:
              - dbt_utils.sequential_values:
                  group_by_columns:
                    - parid
                    - taxyr
                    - procname
                  config:
                    where: &unique-conditions |
                      rolltype != 'RR'
                      AND procname IN ('CCAOVALUE', 'CCAOFINAL', 'BORVALUE')
                      AND deactivat IS NULL 
                      AND valclass IS NULL
                    error_if: ">15300"
          - name: splitno
            description: '{{ doc("column_splitno") }}'
          - name: status
            description: '{{ doc("column_status") }}'
          - name: taxtable
            description: Flag to indicate assessment record used in tax calculation
          - name: taxyr
            description: '{{ doc("shared_column_year") }}'
          - name: tottax
            description: Total tax
          - name: trans_id
            description: '{{ doc("column_trans_id") }}'
          - name: upd_status
            description: '{{ doc("column_upd_status") }}'
          - name: val01
            # Test that all val* columns are not negative. Pulled from
            # Inquire query FP Checklist - Negative ASMT Values, Will C.
            tests: &test-non-negative
              - dbt_utils.accepted_range:
                  min_value: 0
                  config:
                    where: &unique-conditions-and-recent |
                      taxyr >= '2023'
                      AND rolltype != 'RR'
                      AND procname IN ('CCAOVALUE', 'CCAOFINAL', 'BORVALUE')
                      AND deactivat IS NULL
                      AND valclass IS NULL
          - name: val02
            tests: *test-non-negative
          - name: val03
            tests: *test-non-negative
          - name: val04
            tests: *test-non-negative
          - name: val05
            tests: *test-non-negative
          - name: val06
            tests: *test-non-negative
          - name: val07
            tests: *test-non-negative
          - name: val08
            tests: *test-non-negative
          - name: val09
            tests: *test-non-negative
          - name: val10
            tests: *test-non-negative
          - name: val11
            tests: *test-non-negative
          - name: val12
            tests: *test-non-negative
          - name: val13
            tests: *test-non-negative
          - name: val14
            tests: *test-non-negative
          - name: val15
            tests: *test-non-negative
          - name: val16
            tests: *test-non-negative
          - name: val17
            tests: *test-non-negative
          - name: val18
            tests: *test-non-negative
          - name: val19
            tests: *test-non-negative
          - name: val20
            tests: *test-non-negative
          - name: val21
            tests: *test-non-negative
          - name: val22
            tests: *test-non-negative
          - name: val23
            tests: *test-non-negative
          - name: val24
            tests: *test-non-negative
          - name: val25
            tests: *test-non-negative
          - name: val26
            tests: *test-non-negative
          - name: val27
            tests: *test-non-negative
          - name: val28
            tests: *test-non-negative
          - name: val29
            tests: *test-non-negative
          - name: val30
            tests: *test-non-negative
          - name: val31
            tests: *test-non-negative
          - name: val32
            tests: *test-non-negative
          - name: val33
            tests: *test-non-negative
          - name: val34
            tests: *test-non-negative
          - name: val35
            tests: *test-non-negative
          - name: val36
            tests: *test-non-negative
          - name: val37
            tests: *test-non-negative
          - name: val38
            tests: *test-non-negative
          - name: val39
            tests: *test-non-negative
          - name: val40
            tests: *test-non-negative
          - name: val41
            tests: *test-non-negative
          - name: val42
            tests: *test-non-negative
          - name: val43
            tests: *test-non-negative
          - name: val44
            tests: *test-non-negative
          - name: val45
            tests: *test-non-negative
          - name: val46
            tests: *test-non-negative
          - name: val47
            tests: *test-non-negative
          - name: val48
            tests: *test-non-negative
          - name: val49
            tests: *test-non-negative
          - name: val50
            tests: *test-non-negative
          - name: val51
            tests: *test-non-negative
          - name: val52
            tests: *test-non-negative
          - name: val53
            tests: *test-non-negative
          - name: val54
            tests: *test-non-negative
          - name: val55
            tests: *test-non-negative
          - name: val56
            tests: *test-non-negative
          - name: val57
            tests: *test-non-negative
          - name: val58
            tests: *test-non-negative
          - name: val59
            tests: *test-non-negative
          - name: val60
            tests: *test-non-negative
            # Also from FP Checklist - Negative ASMT Values AND the view
            # definition used for vw_pin_value
          - name: valapr1
            tests: &test-non-null-and-non-negative
              - not_null:
                  config:
                    where: *unique-conditions-and-recent
                    error_if: ">702"
              - dbt_utils.accepted_range:
                  min_value: 0
                  config:
                    where: *unique-conditions-and-recent
          - name: valapr2
            tests: *test-non-null-and-non-negative
          - name: valapr3
            tests: *test-non-null-and-non-negative
          - name: valasm1
            tests: *test-non-null-and-non-negative
          - name: valasm2
            tests: *test-non-null-and-non-negative
          - name: valasm3
            tests: *test-non-null-and-non-negative
          - name: valclass
            description: '{{ doc("column_valclass") }}'
          - name: valtax
            description: Taxes
          - name: valyear
            description: Valuation year
          - name: wen
            description: '{{ doc("shared_column_updated_at") }}'
          - name: wencalc
            description: '{{ doc("column_wencalc") }}'
          - name: who
            description: '{{ doc("shared_column_updated_by") }}'
          - name: whocalc
            description: '{{ doc("column_whocalc") }}'

        tests:
          # Note that this test is NOT actually the unique primary key of
          # this table, since there doesn't seem to BE a unique combination
          # of identifying columns
          - unique_combination_of_columns:
              name: asmt_all_unique_by_parid_procname_and_taxyr
              combination_of_columns:
                - parid
                - procname
                - taxyr
              config:
                where: *unique-conditions
                error_if: ">15300"
